#!/mnt/extradrive/apps/anaconda3/bin/python

from __future__ import print_function
import numpy as np
import matplotlib.pyplot as plt
import sys
import os

# change the font size
import matplotlib
matplotlib.rcParams.update({'font.size': 18})





path = os.path.dirname(os.path.realpath(__file__)) # current path
path += "/../pysrc"
sys.path.append(path) # add library
from interfacetk import plotpyqt




import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--input",default="MULTILDOS",help='Input folder')
parser.add_argument("--grid",default="False",help='Use grid mode')
args = parser.parse_args() # get the arguments



#fig.set_facecolor("white") # white

folder = "MULTILDOS/" # folder with all the stuff

names = open(folder+"MULTILDOS.TXT").readlines() # read the files

names = [name.replace("\n","") for name in names] # remove character
energies = [name.split("_")[1] for name in names] # energies

###########################################
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button, RadioButtons

md = np.genfromtxt(folder+"DOS.OUT").transpose()

def plot(main):
  """Plotting function"""
  fig = plt.gcf()
  plt.gcf().canvas.set_window_title('Spatially resolved DOS')
  ax = fig.add_subplot(121) # axis for the LDOS
  axd = fig.add_subplot(122) # axis for the DOS
  plt.subplots_adjust(left=0.1, bottom=0.25)
  t = np.arange(0.0, 1.0, 0.001)
  a0 = 5
  f0 = 3
  ax.clear() # clear LDOS
  val = main.get_slider("Energy")
  val = int(val/100*len(names))
  if val>(len(names)-1): val = len(names)-1 # fix
  name = names[val] # get this file
  energy = energies[val] # get this energy
#  print("Name",name)
  m = np.genfromtxt(folder+name).transpose() # read file
  x = m[0] # x position
  y = m[1] # y position
  z = m[2] # z position
  z = z/np.max(z) # normalize

  minsat = main.get_slider("Min Saturation") # miminum saturation
  maxsat = main.get_slider("Max Saturation") # maximum saturation
  z[z>maxsat] = maxsat # minimum saturation
  z = z/np.max(z) # reescale
  z[z<minsat] = minsat # minimum saturation
  z = z -minsat # shift
  z = z/np.max(z) # normalize
  scale = 30.0
  color = z
  cmap = plt.get_cmap(main.get_combobox("colormap")) 
  if args.grid=="False":
    size = main.get_slider("Size") # size reescaling
    size = (2*size)**4 # scale
    size = 100*size
    cplot = ax.scatter(x,y,s=size,c=color,
            edgecolor="none",cmap=cmap,vmin=0.0,vmax=1.0)
    ax.set_facecolor(main.get_combobox("Background"))
  else:
      zmap = z.reshape((len(np.unique(x)),len(np.unique(y))))
      cplot = ax.imshow(zmap.T, aspect='auto', origin='lower',
            cmap = cmap,interpolation=main.get_combobox("Interpolation"),
            vmin=0,vmax=1,
            extent = (np.min(x), np.max(x), np.min(y), np.max(y)))
  cb = fig.colorbar(cplot,ticks=[0,1])
  cb.ax.set_yticklabels([0,'Max'])
  ax.axis("equal")
  zoom = main.get_slider("Zoom")
  ax.set_xticks([])
  ax.set_yticks([])
  ax.set_xlim([np.min(x)*zoom,np.max(x)*zoom])
  ax.set_ylim([np.min(y)*zoom,np.max(y)*zoom])
  ax.set_title("LDOS E="+str(round(float(energy),3)))
  axd.clear()  # clear DOS
  axd.plot(md[0],md[1]) # plot DOS
  yys = np.array([0,max(md[1])]) # y positions
  xxs = np.array([float(energy),float(energy)]) # energy
  axd.plot(xxs,yys,linewidth=3,c="red") # energy checked
  #print("Energy",energy)
  axd.set_ylim([0,max(md[1])]) # ylim
  axd.set_xlim([min(md[0]),max(md[0])]) # xlim
  axd.set_xticks(np.linspace(min(md[0]),max(md[0]),5,endpoint=True)) # xlim
  axd.set_ylabel("DOS")
  axd.set_xlabel("Energy")
  axd.set_title("Density of states")
  axd.set_yticks([])
  return fig


app,main = plotpyqt.get_interface(plot)
main.add_slider(label="Energy") # Slider for the dots
if args.grid=="False":
  main.add_slider(label="Size",vs=np.linspace(0.0,1.0,100),v0=0.5) # Size

if args.grid=="False": v0 = 0.9
else: v0 = 0.5

main.add_slider(label="Max Saturation",v0=v0,vs=np.linspace(0.01,1.,100)) # Saturation
main.add_slider(label="Min Saturation",v0=0.,vs=np.linspace(0.01,1.,100)) # Saturation
main.add_slider(label="Zoom",vs=np.linspace(0.01,1.1,40),v0=1.1) # Slider for the dots
cs = ["inferno","plasma","magma","rainbow","jet"]
main.add_combobox(cs,label="Color Map",key="colormap") # Slider for the dots
if args.grid=="False":
  main.add_combobox(["black","white"],label="Background") # Slider for the dots
if not args.grid=="False":
  main.add_combobox(["bicubic","none",'bilinear'],label="Interpolation") 
main.setWindowTitle("Local DOS")

main.plot()
main.show()
sys.exit(app.exec_())
