#!/mnt/extradrive/apps/anaconda3/bin/python

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cmap


def read_positions():
  """Reads the positions of the system"""
  return np.genfromtxt("POSITIONS.OUT")


def read_ldos():
  """Reads the density of the system"""
  return np.genfromtxt("LDOS.OUT").transpose()[2]


def get_lattice():
  """Get the lattice vectors"""
  lines = open('hamiltonian.in','r').readlines() # read the file
  il = 0
  for l in lines:
    il += 1 # increase counter
    if "LATTICE_VECTORS" in l: # if there are no lattice vectors
      return float(lines[il])
  else:
    return None




def lorentz(centers=[[0.,0.,0.]], heights=[10.0]):
    """ Creates a set of lorentzian at that position and with a height"""
    if len(heights)<len(centers):
      heights = [10. for i in centers]
    fac = 5.0 # factor to mix the gaussians
    def wave(x,y):
      z = 0.
      for (c,h) in zip(centers,heights):
        r = ((x-c[0])**2+(y-c[1])**2)*fac # renormalized gaussian       
        z += h*np.exp(-(r))
      return z+1.0
    xs = [c[0] for c in centers] # get x coordinates
    ys = [c[1] for c in centers] # get y coordinates
    dx = (max(xs) - min(xs))/200
    dy = dx*(max(ys) - min(ys))/(max(xs) - min(xs))
    dy = dx
    x = np.arange(-1.+min(xs), 1.+max(xs), dx)
    y = np.arange(-1.+min(ys), 1.+max(ys), dy)
    x, y = np.meshgrid(x, y)
    z = wave(x,y)
    return (x,y,z)



# get the lttice constant
l = get_lattice()
# check the dimension, if it is 0 put lattice to None!!!
if not "LATTICE_VECTORS" in open("hamiltonian.in").read():
  l = None
# get the centers of the balls
centers = read_positions()
# if there is lattice constant, add neighbor
#centers = [[2*i,0.,0] for i in range(4)]
heights = read_ldos()
#heights = read_density()
heights = 4*heights/max(heights)
#heights = np.sqrt(heights)
#balls = [ball(center=c) for c in centers]
if not l==None:
  replicas = 10 # number of replicas
  cm = centers.tolist()  # copy centers
  ct = []
  from copy import deepcopy
  for i in range(replicas): 
    cr = [[c[0]+float(i)*l,c[1],c[2]] for c in cm]
    ct += deepcopy(cr) # add to the list
  centers = np.array(ct)  
  heights = np.array(heights.tolist()*replicas)


fig = plt.figure() # create figure
fig.set_facecolor("white") # white background
(x,y,z) = lorentz(centers=centers,heights=heights)
im = plt.imshow(z, interpolation='bilinear', origin='lower',
                cmap=cmap.gray, extent=(-3,3,-2,2))
fig.gca().set_aspect('equal')


plt.show()
