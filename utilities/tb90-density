#!/mnt/extradrive/apps/anaconda3/bin/python

# this script read mean_field.in and calculates the magnetism in the
# different sites
# it assumes that each position has spin up and down (2*i,2*i+1)


import numpy as np

def create_densities():
  """ Create the file DENSITIES.OUT """
  lines = open("hamiltonian.in","r").readlines() # read hamiltonian.in  
  i = 0
  for l in lines:
    i += 1
    if 'DIMENSION_OF_THE_HAMILTONIAN' in l:
      norbitals = int(lines[i]) # get the number of orbitals
  nat = norbitals/2 # number of atoms
  
  nl = len(lines)
  
  # create matrix of the density matrix
  m = np.zeros((norbitals,norbitals),np.complex)
  col = np.genfromtxt("DENSITY_MATRIX.OUT")
  
  # create matrix
  for c in col:
   i = c[0]-1
   j = c[1]-1
   re = c[2]
   im = c[3]
   m[i,j] = re+1j*im
  
  
  
  # eigenvactors for the different projections
  mx = np.array([0.0,1.0,1.0,0.0])
  my = np.array([0.0,1j,-1j,0.0])
  mz = np.array([1.0,0.0,0.0,-1.0])
  dd = np.array([1.0,0.0,0.0,1.0])
  
  
  # magnetization of each atom
  mag_ats = []
  den = []
  
  for iat in range(nat):
    ind = iat * 2 
    # vector with the elements of the local field
    mm = np.array([m[ind,ind],m[ind,ind+1],m[ind+1,ind],m[ind+1,ind+1]])
    magx = np.dot(mm,mx).real 
    magy = np.dot(mm,my).real 
    magz = np.dot(mm,mz).real 
    mag_ats += [[magx,magy,magz]]
    den += [np.dot(mm,dd).real] 
  
  
  mag_ats = np.array(mag_ats).transpose()
  inds = [i for i in range(nat)]
   
  # save the magnetization in a file
  fm = open("DENSITIES.OUT","w")
  fm.write("#  Componnents of the magnetization in the different atoms\n")
  fm.write("# index  Den Mx My Mz\n")
  for i in range(nat):
    f = '{0:.8f}'.format
    fm.write(str(i+1)+"  "+f(den[i])+"  "+f(mag_ats[0,i])+"  "+f(mag_ats[1,i])+"  "+f(mag_ats[2,i])+"\n" )
  fm.close()
  return (den,mag_ats)


# create the file densities
(den,mag_ats) = create_densities()

# print a testing plot
import pylab as pl

fig = pl.figure(1)  # create the figure

# print a 2d plot of magnetizations
mag = mag_ats[0]**2 + mag_ats[1]**2 + mag_ats[2]**2
magt = np.sqrt(mag) # total magnetization
magx = np.array(mag_ats[0]) # x component
magy = np.array(mag_ats[1]) # y component
magz = np.array(mag_ats[2]) # z component
den = np.array(den) # density
den = den - sum(den)/len(den) 



# print the atomic positions
def read_positions():
  global x,y,distance_neighbor
  """Read the positions file 'positions.xyz
     if it doesn't exist create a simple array"""
  import os
  print os.getcwd()+"/positions.xyz"
  if os.path.isfile(os.getcwd()+"/positions.xyz"):  # read from file
    print "positions.xyz exists, reding positions from it"
    lines = open("positions.xyz","r").readlines()
    nat = int(lines[0]) # number of atoms
    distance_neighbor = float(lines[1].split("neighbor")[1].split("=")[1].split()[0])
    x = []
    y = []
    for i in range(nat): # get all the positions
      line = lines[i+2].split()
      x += [float(line[1])]  # save x position
      y += [float(line[2])]  # save y position
  else: # if it doesn't exist
    global nat # number of atoms
    """ positions.xyz not found, creating square lattice """
    y = [float(i+i) for i in range(nat)]
    x = [0.0 for i in range(nat)]
    distance_neighbor = 1.0


read_positions()  # get the position

def scale_mag(mag): # scale magnetism
  from numpy import array
  mm = array([abs(mi) for mi in mag]) # absolute value
  if max(mm)<0.0001:
    return mm
  if max(mm)>0.0001:
    mmax = max(mm)
    mm = mm/mmax*50
    return mm

# class for the magnetism plot
class mag_plot:
  component = 'Den'
  mag = den
  scale = 1.0
  graph = pl.subplot(111)
  pl.subplots_adjust(left=0.1, bottom=0.15)
  x = x
  y = y
  nrep = 4
  drep = distance_neighbor

# return positive values and zero for negatives
def pos_or_zero(a):
  """ Returns positive values and zero for others"""
  b = []
  for ia in a:  # loop
    val = 0.0 # by defect zero
    if ia>0:
     val = ia
    b+=[val] # store value
  return np.array(b) # return

# update the graph
def update_mag(dummy):
  global mag_graph # global class with everything
  graph = mag_graph.graph # the plot
#  which_mi = buttons_mi.cnt
  mfac = slider_ms.val # get the factor value
  nrep = int(slider_rep.val) # get the number of replicas
  mfac = mfac**2
  mag = mag_graph.mag # magnetization to plot
  from numpy import array
  x = array(mag_graph.x) # x position
  y = array(mag_graph.y) # y position
  graph.clear()
  drep = mag_graph.drep # distance to neighboring cell
  for irep in range(nrep): # loop over replicas
    graph.scatter(x+irep*drep,y,color = "black",s =1.0)
    graph.scatter(x+irep*drep,y,s=mfac*pos_or_zero(mag),color = "red")
    graph.scatter(x+irep*drep,y,s=mfac*pos_or_zero(-mag),color = "blue")
  graph.axis("equal")






# import slider class
from matplotlib.widgets import Slider
from matplotlib.widgets import RadioButtons

# scale of the magnetism
# ======================
# define where the slider is
axes_ms  = pl.axes([0.15, 0.01, 0.15, 0.03])
# create the slider
slider_ms = Slider(axes_ms, 'M_scale', 1.0, 100.0, valinit=1.0)


# number of replicas in the x direction
# define where the slider is
axes_rep  = pl.axes([0.75, 0.01, 0.15, 0.03])
# create the slider
slider_rep = Slider(axes_rep, 'X_rep', 1, len(x), valinit=1)



# which magnetism to plot
axes_mi = pl.axes([0.40, 0.01, 0.05, 0.1])
buttons_mi = RadioButtons(axes_mi, ('Den','M_t','M_x','M_y','M_z'))
def update_component(label):
  global mag_graph
  mag_plot.component = label
  if label=='M_x':
    mag_graph.mag = magx
  if label=='M_y':
    mag_graph.mag = magy
  if label=='M_z':
    mag_graph.mag = magz
  if label=='M_t':
    mag_graph.mag = magt
  if label=='Den':
    mag_graph.mag = den
  update_mag(0.0)

# when the button is touched update
buttons_mi.on_clicked(update_component)



# when the slider is touched update the graph
slider_ms.on_changed(update_mag)
slider_rep.on_changed(update_mag)



mag_graph = mag_plot() # global magnetic plot



update_mag(0.0) # initial plot

fig.set_facecolor("white")

pl.show()






