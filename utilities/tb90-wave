#!/mnt/extradrive/apps/anaconda3/bin/python


# function to read the hamiltonian created by tb90
def read_hamiltonian(filename):
  """ This function read the hamiltonian created by tb90.in,
   getting the onsite energy and the hopping 
   filename is the name of the file """
  lin = open(filename,"r").readlines()
  norb = int(lin[1])
  print "Reading a hamiltonian of dimension "+str(norb)
  import numpy as np
  onsite = np.matrix(np.zeros((norb,norb),dtype=np.complex))
  hopping = np.matrix(np.zeros((norb,norb),dtype=np.complex))
  nv = int(lin[4].split()[0]) # number of non vanishing elements for onsite
  il = 6 # number of line
  # read onsite
  for i in range(il,nv+il):
    l = lin[i].split()
    i = int(l[0])-1
    j = int(l[1])-1
    val = float(l[2]) + 1j*float(l[3])
    onsite[i,j] = val
  il += nv + 3   # go to hopping
  nv  = int(lin[il].split()[0]) # vanishing elements in hopping
  il += 2
  # read hopping
  for i in range(il,nv+il):
    l = lin[i].split()
    i = int(l[0])-1
    j = int(l[1])-1
    val = float(l[2]) + 1j*float(l[3])
    hopping[i,j] = val
  return (onsite,hopping)



import sys

k = float(sys.argv[1])
e = float(sys.argv[2])



(onsite,hopping) = read_hamiltonian("hamiltonian.in")

import numpy as np
from scipy.linalg import eigh

hopping_k = hopping*np.exp(1j*k*2.0*np.pi)
hamiltonian = onsite + hopping_k + hopping_k.H

eig = eigh(hamiltonian)  # get eigenvalues and eigenvectors
energies = eig[0]  # store eigenvalues
waves = eig[1].T  # store eigenvectors


norb = len(energies) # number of orbitals


ie = 0 # loop for the closest eigenvector
tol =0.02
energy = []
wave = []
for ii in range(norb):
  enei = energies[ii]
  if abs(e-energies[ii])<tol:
    energy += [energies[ii]]
    wave += [waves[ii]]

num_waves = len(wave)

import pylab as pl

fig =pl.figure(1)

wave_plot = fig.add_subplot(1,1,1)
pl.subplots_adjust(left=0.1, bottom=0.4)

print "Selected energies",energy

density = np.array([0.0 for ii in range(norb)])



for ii in range(norb):
  for jj in range(len(energy)):
    density[ii] += wave[jj][ii]*np.conjugate(wave[jj][ii])
 
# sum over spin
density = np.array([density[2*i]+ density[2*i+1] for i in range(norb/2)])

#density = np.array([density[2*ii]+density[2*ii+1] for ii in range(norb/2)])

# plot the waves




def separate_components(wavein,n):
  """ Sums the n first compoenents """
  from numpy import array
  norb = len(wavein)
  wavesout = array([[0.0 for j in range(norb/n)] for i in range(n)])
  for i in range(n):
    for j in range(norb/n):
      kk = i+j*n
      wavesout[i][j] = wavein[kk]
  inds = array([i*n for i in range(norb/n)])
  return (inds,wavesout)

def update_wave(num_comp):
  """ Update the wavefunction plot """
  global density # all component density
  global wave_plot # subplot for the waves
  num_comp = int(num_comp)
  (inds,wavesout) = separate_components(density,num_comp)
  wave_plot.clear()
  for iwave in wavesout:
    wave_plot.plot(inds,iwave,marker='o')
  wave_plot.set_title("Density of "+str(num_waves)+" waves, k = "+str(k)+", e = "+str(e))
  wave_plot.set_xlabel("Atom index")
  wave_plot.set_ylabel("Psi(x)^2")


# import slider class
from matplotlib.widgets import Slider
from matplotlib.widgets import RadioButtons

# sum over how many componeents???
# ======================
# define where the slider is
axes_num_comp  = pl.axes([0.15, 0.01, 0.15, 0.03])
# create the slider
slider_num_comp = Slider(axes_num_comp, 'Components', 1.0, 6.0, valinit=2.0)

# when the slider is touched update the graph
slider_num_comp.on_changed(update_wave)










update_wave(2)

fig.set_facecolor("white")


pl.show()





