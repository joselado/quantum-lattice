#!/home/joselado/apps/anaconda3/bin/python

import pylab as py
import matplotlib.pyplot as plt
import sys
import numpy as np
import matplotlib
matplotlib.rcParams.update({'font.size': 18})
matplotlib.rcParams['font.family'] = "Bitstream Vera Serif"


## get the input
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--input",default="2D.OUT",help='Input file')
#parser.add_argument("--xlabel",default="x",help='x label')
parser.add_argument("--ylabel",default="y",help='E/t')
parser.add_argument("--zlabel",default="z",help='A')
parser.add_argument("--title",default="Colormap",help='Window title')
args = parser.parse_args() # get the arguments

m = np.genfromtxt(args.input).transpose()

def getplot(obj):
    fig = plt.figure(obj.figure.number)
    #fig.subplots_adjust(0.2,0.2)
    
    fig.set_facecolor("white")
    
    x = m[0]
    y = m[1]
    z = m[2]
    
    # get dimensions assuming uniform grid
    
      
    ny = (y.max()-y.min())/abs(y[1]-y[0])
    ny = int(round(ny)) + 1
    nx = len(z)/ny
    
    nx = int(nx)
    ny = int(ny)
    
    #nx = 20
    #ny = len(z)//nx
    
    
    
    print("Detected",nx,ny,"grid")
    
    Z = np.abs(z).reshape(nx,ny) # makes a (Zy,Zx) matrix out of z
    Z = z.reshape(nx,ny) # makes a (Zy,Zx) matrix out of z
    T = Z.T              # transposes the matrix (Zx,Zy)
    
    # now interpolate to get a smooth mesh
    from scipy.interpolate import interp2d
    x = np.linspace(0.,1.,nx)
    y = np.linspace(0.,1.,ny)
    xx, yy = np.meshgrid(x, y)
    f = interp2d(x, y, T, kind='linear')
    
    # 
    x = np.linspace(0.,1.,len(np.unique(np.round(x,5))))
    y = np.linspace(0.,1.,len(np.unique(np.round(y,5))))
    
    z_inter = f(x,y)
    
    # now plot the data
    
    vmax = np.percentile(z_inter,100*obj.get_slider("Saturation"))
#    vmax = np.percentile(z_inter,0.95)
    vmin= 0
    #py.subplot(1,2,1)
    #py.contour(x,y,z_inter,300,cmap = py.get_cmap("hot"))
    minx = np.min(m[0])
    maxx = np.max(m[0])
    miny = np.min(m[1])
    maxy = np.max(m[1])
    cplot = plt.imshow(z_inter, aspect='auto', origin='lower',
            cmap = plt.get_cmap(obj.get_combobox("cmap")),
            extent = ( minx, maxx, miny, maxy),
            interpolation=obj.get_combobox("Interpolation"),
            vmax=vmax,vmin=vmin)
    cb = fig.colorbar(cplot,ticks=[vmin,vmax])
    cb.ax.set_yticklabels(["Min",'Max'])
    cb.set_label(args.zlabel)
    #py.xticks([])
    #py.yticks([])
    
    # add the lines in the bandstructure
    ll = open("BANDLINES.OUT","r").readlines()
    ik = []
    names = []
    for l in ll:
      l = l.split()
      ik.append(float(l[0]))
      names.append("$"+l[1]+"$")
    ik = np.array(ik)/max(ik)
    plt.xticks(ik,names)
    
    
    plt.ylabel("Energy [t]")
    return fig


# now create the interface
import os
import sys
path = os.path.dirname(os.path.realpath(__file__)) # current path
path += "/../pysrc"
sys.path.append(path) # add library
from interfacetk import plotpyqt
app,window = plotpyqt.get_interface(getplot)
window.add_slider(label="Saturation",vs=np.linspace(0.,1.,100),v0=0.95)
window.add_combobox(["inferno","hot","plasma","viridis","cool","rainbow"],label="Color map",key="cmap")
window.add_combobox(["bicubic","none"],label="Interpolation")
window.setWindowTitle(args.title)

window.plot()
window.show()
sys.exit(app.exec_())




