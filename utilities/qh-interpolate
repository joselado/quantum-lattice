#!/mnt/extradrive/apps/anaconda3/bin/python

import numpy as np
import numpy 
from numba import jit
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("--nx",default=300)
parser.add_argument("--ny",default=300)
parser.add_argument("--smooth",default=2)
parser.add_argument("--smooth_nxny",default="False")
parser.add_argument("--input",default="")
parser.add_argument("--xcut",default="")
parser.add_argument("--dx",default="")
parser.add_argument("--dy",default="")
parser.add_argument("--ycut",default="")
parser.add_argument("--column",default="2")
#        description="Frames per second in the video")
args = parser.parse_args() # get the arguments

name = args.input

nx = int(args.nx)
ny = int(args.ny)
col = int(args.column)
smooth = float(args.smooth)

if name=="":
    print("Provide an input file")
    exit()


@jit(nopython=True)
def wave_jit(x,y,centers,heights,facx,facy,z):
  for i in range(len(centers)):
    c = centers[i]
    h = heights[i]
    r = facx*(x-c[0])**2+facy*(y-c[1])**2 # renormalized gaussian       
    z += h*np.exp(-(r))
  return z




def write_interpolation(centers=[[0.,0.,0.]], heights=[10.0],name=""):
    """ Creates a set of gaussians at that position and with a height"""
    if len(heights)<len(centers): raise
    if args.smooth_nxny == "True":
        if args.xcut!="":
            facx = nx/float(args.xcut)
        else:
            facx = nx/np.max(np.abs(np.array(centers)[:,0]))
        if args.ycut!="":
            facy = ny/float(args.ycut)
        else:
            facy = ny/np.max(np.abs(np.array(centers)[:,1]))
        facx = facx/smooth
        facy = facy/smooth
    else:
      fac = 1./smooth # factor to mix the gaussians
      facx = fac
      facy = fac
    print(facx,facy)
    def wave(x,y):
        z = x*0.0 + y*0.0
        return wave_jit(x,y,np.array(centers),np.array(heights),facx,facy,z)
    xs = [c[0] for c in centers] # get x coordinates
    ys = [c[1] for c in centers] # get y coordinates
    if args.dx=="": dx = (np.max(xs) - np.min(xs))/10
    else: dx = float(args.dx)
    if args.dy=="": dy = (np.max(ys) - np.min(ys))/10
    else: dy = float(args.dy)
    x = np.linspace(min(xs)-dx,max(xs)+dx,nx)
    y = np.linspace(min(ys)-dy,max(ys)+dy,ny)
    fo = open(name,"w") # open output file
    for ix in x:
      z = wave(ix,y)
      for (iy,iz) in zip(y,z):
        fo.write(str(ix)+"    ")
        fo.write(str(iy)+"    ")
        fo.write(str(iz)+"\n")
    fo.close()

#centers = np.arange(0.,10.,2.)

import sys
# get the centers of the balls
m = np.genfromtxt(name).transpose()

if args.xcut!="": # given value
    xc = float(args.xcut)
    m = m[:,np.abs(m[0,:])<xc]
if args.ycut!="": # given value
    yc = float(args.ycut)
    m = m[:,np.abs(m[1,:])<yc]


centers = [[m[0,i],m[1,i],0.] for i in range(len(m[0]))]

heights = m[col,:]
#heights = read_density()
#heights = 4*heights/np.max(heights)
#heights = np.sqrt(heights)
#balls = [ball(center=c) for c in centers]



write_interpolation(centers=centers,heights=heights,name=name+"-interpolated")



