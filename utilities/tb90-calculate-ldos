#!/mnt/extradrive/apps/anaconda3/bin/python

import numpy as np

# this script calculates the LDOS by the dyson approach

def read_hamiltonian(input_file="hamiltonian.in"):
  """ Read a hamiltonian from hamiltonian.in """
  print "reading hamiltonian from",input_file
  lines = open(input_file,"r").readlines() # read the file
  nl = range(len(lines))
  # get the dimension
  for (l,i) in zip(lines,nl):
    if "DIMENSION_OF_THE_HAMILTONIAN" in l:
      dd = int(lines[i+1].split()[0]) # dimension of the hamiltonian
      break
  # get the onsite
  def read_name(mm):
    mat = np.matrix([[0.0j for i in range(dd)] for j in range(dd)])
    for (l,i) in zip(lines,nl):
      if mm in l:
        first = i+1 # first line with onsite element
        break
    for il in range(first,len(lines)):  # loop over lines
      l = lines[il].split()
      if len(l)<4:  # stop if blanck line
        break
      i = int(l[0])-1
      j = int(l[1])-1
      re = float(l[2])
      im = float(l[3])
      mat[i,j] = re + 1j*im # add element
    return mat
   # now read the matrices
  intra = read_name("ONSITE_MATRIX")  # read onsite
  try:
    inter = read_name("HOPPING_MATRIX_1")  # read hopping
#    inter = inter.H
  except:
    inter = None
  has_eh = False
  return (intra,inter)


def dyson(intra,inter,energy=0.0,eps=0.01,n=100):
  """ Calcuate centrl green by iteration"""
  g_oldr = intra*0. # first iteration
  selfr = intra*0. # first iteration
  selfl = intra*0. # first iteration
  g_oldl = intra*0. # first iteration
  ec = energy+1j*eps # complex energy
  iden = np.matrix(np.identity(len(intra),dtype=complex)) # create identity
  for i in range(n): # loop over iterations
    selfr = inter*g_oldr*inter.H # selfenergy    
    selfl = inter.H*g_oldl*inter # selfenergy    
    g_oldr = (iden*ec - intra - selfr).I # dyson equation
    g_oldl = (iden*ec - intra - selfl).I # dyson equation
  # and now the central part
  g = (iden*ec - intra - selfr - selfl).I # dyson equation
  return g

def read_positions():
  """Reads the positions of the system"""
  return np.genfromtxt("POSITIONS.OUT")


def write_ldos(g):
  """ Write local density of states to a file"""  
  fl = open("LDOS.OUT","w")
  ldos = [-(g[2*i,2*i]+g[2*i+1,2*i+1]).imag for i in range(len(g)/2)]
  xyz = read_positions()
  for i in range(len(ldos)):
    fl.write(str(xyz[i][0])+"   ") 
    fl.write(str(xyz[i][1])+"   ") 
    fl.write(str(ldos[i])+"\n")  
  fl.close()

# get the energy as an input form the command line
import sys
try:
  energy = float(sys.argv[1])
except:
  print "Default energy = 0.0"
  energy = 0.0



# read the hamiltonian
(e,t) = read_hamiltonian()
if t==None: # if zero dimensional
  g = dyson(e,e*0.0,energy=energy,n=0)
else:  # perform the dyson calculation
  g = dyson(e,t,energy=energy)
# save the density of states
write_ldos(g)

