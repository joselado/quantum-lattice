#!/mnt/extradrive/apps/anaconda3/bin/python

# this script read mean_field.in and calculates the magnetism in the
# different sites
# it assumes that each position has spin up and down (2*i,2*i+1)



mag_factor = 2.0

import numpy as np
import sys

rep = 0 # number of replicas
if len(sys.argv)>1:
  rep = sys.argv[1]


def read_dout():
  m = np.genfromtxt('DENSITIES.OUT').transpose() # read file
  mag = np.array([m[2],m[3],m[4]]) # index and magnetizations
  return (m[0],mag) # index and magnetizations

def get_mag():
  """ Get the magnetization """
  from libmag import create_densities
  (den,mag) = create_densities()
  return (range(len(den)),mag)



def get_pos():
  lines = open('hamiltonian.in','r').readlines() # read the file
  ii = 0
  coor = []
  first = False
  for l in lines:
    if first: 
      if len(l.split()) == 0: # end of POSITIONS part
        break
      coor += [l]
    if 'POSITIONS' in l:  # find the POSITIONS part
      first = True
  xyz = []
  for c in coor: # loop over stored lines
    cc = c.split()
    xyz += [[float(cc[0]),float(cc[1]),float(cc[2])]] 
  xyz = [xyz[2*i] for i in range(len(xyz)/2)]
  xyz = np.array(xyz).transpose()
# if positions not found
  if len(xyz)==0:
    print "No positions provided, assumin linear chain in z"
    lines = open('hamiltonian.in','r').readlines() # read the file
    ii=0
    for l in lines: # look for dimension
      ii+=1
      if 'DIMENSION_OF_THE_HAMILTONIAN' in l:
        norb = int(lines[ii].split('\n')[0])/2
        break
    xyz = np.array([[0.,0.,float(i)] for i in range(norb)]).transpose()

  return xyz


def get_bonds():
  """ Get the bonds between different atoms """
  lines = open('hamiltonian.in','r').readlines() # read the file
  bonds = [] # list with pairs of bonded atoms
  found = False
  for l in lines:    
    if found: # store element
      ll = l.split()
      if len(ll)<1: # exit loop if blank line found
        break
      i1 = int(ll[0])
      i2 = int(ll[1])
      if  (i1<i2) and (i1%2==1) and (i2%2==1):
        bonds += [(i1/2,i2/2)]
    if 'ONSITE_MATRIX' in l: # find onsite matrix
      found = True
  return bonds





get_magnetization = read_dout # use a particular function
get_magnetization = get_mag # use a particular function
get_positions = get_pos # use a particular function



(ind,mag) = get_magnetization() # get the orbital index and magnetizations
xyz = get_positions()




def scale_mag(mag,threshold=0.001):
  """ Scales the magnetism if bigger than a certain threhold"""
  mmag = mag.transpose()
  mm = np.array([im.dot(im) for im in mmag]) # norms square
  mm = np.sqrt(mm) # vector with norms
  if max(mm)<threshold:  # if small do nothing
    return mag
  else:
    return mag/max(mm)



##########################
# Visual python routines #
##########################

import visual as v


def create_lattice(xyz):
  """ Creates a lattice using xyz coordinates"""
  spheres = []
  ii = 0
  for ii in range(len(xyz[0])): # loop over atoms
    pos = (xyz[0][ii],xyz[1][ii],xyz[2][ii])  # position
    sphere = v.sphere(pos=pos) # create sphere
    sphere.color = v.color.yellow  # color of the arrow
    spheres += [sphere] # store spheres
    sphere.radius = 0.3
    ii += 1
  return spheres




def plot_magnetization_arrow(xyz,mag):
  """ PLots the magnetization with arrows"""
  global mag_factor
  mag = scale_mag(mag)*mag_factor
  arrows = []
  ii = 0
  for ii in range(len(xyz[0])): # loop over atoms
    pos = (xyz[0][ii],xyz[1][ii],xyz[2][ii])  # position
    axis = (mag[0][ii],mag[1][ii],mag[2][ii])  # position
    arrow = v.arrow(pos=pos,axis=axis) # create arrow
    arrow.color = v.color.red  # color of the arrow
    arrows += [arrow] # store arrow
    ii += 1
  return arrows


def create_bonds(xyz,bonds):
  """ Creates the bonds of the crystal """
  cylinders = []
  for (ii,jj) in bonds: # loop over the bonds
    r1 = np.array([xyz[0][ii],xyz[1][ii],xyz[2][ii]])  # position
    r2 = np.array([xyz[0][jj],xyz[1][jj],xyz[2][jj]])  # position
    axis = r2-r1  # position
    crad = 0.1 # radius of the cylinder
    cylinder = v.cylinder(pos=r1,axis=axis,radius=crad) # create arrow
    cylinder.color = v.color.yellow  # color of the arrow    
    cylinders += [cylinder]


def plot_magnetization_cylinders(xyz,mag):
  """ PLots the magnetization with arrows"""
  global mag_factor
  mag = scale_mag(mag)*mag_factor
  cylinders = []
  cones = []
  ii = 0
  for ii in range(len(xyz[0])): # loop over atoms
    pos = np.array([xyz[0][ii],xyz[1][ii],xyz[2][ii]])  # position
    axis = np.array([mag[0][ii],mag[1][ii],mag[2][ii]])  # position
    crad = 0.05*np.sqrt(axis.dot(axis)) # radius of the cone and cylinder
    cylinder = v.cylinder(pos=pos,axis=axis) # create arrow
    cone = v.cone(pos=pos+axis,axis=axis/4.0,radius = 2.0*crad ) # create arrow
    cylinder.color = v.color.red  # color of the arrow
    cone.color = v.color.red  # color of the arrow
    cylinder.radius = crad  # radius of the cone
    cylinders += [cylinder] # store arrow
    ii += 1
  return cylinders





# setup the display
scene2 = v.display(title='Magnetism',
     x=0, y=0, width=300, height=300,
     center=(0,0,0), background=(1,1,1))



  


create_lattice(xyz)    # plot the atoms
#plot_magnetization_arrow(xyz,mag)   # plot the magnetization as arrows
try:
  plot_magnetization_cylinders(xyz,mag)   # plot the magnetization as cylinders
except:
  print "Magnetism hasn't been calculated"


#v.display(background=v.color.white)



bonds = get_bonds()  # get the bonds of the crystal
create_bonds(xyz,bonds)  # create the bonds of the system



